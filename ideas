{% extends "base.html" %}

{% block title %}Игра "Виселица"{% endblock %}

{% block content %}
<div class="container-fluid hangman-game">
    <div class="game-header">
        <div class="game-info">
            <h1 class="game-title">
                <i class="fas fa-skull-crossbones"></i>
                Виселица
            </h1>
            <div class="game-subtitle">
                Угадайте английское слово по буквам!
            </div>
        </div>
        
        <div class="game-stats">
            <div class="stat-item">
                <div class="stat-label">Слово</div>
                <div class="stat-value">
                    <span id="current-word">1</span> / <span id="total-words">{{ num_words }}</span>
                </div>
            </div>
            <div class="stat-item">
                <div class="stat-label">Правильно</div>
                <div class="stat-value" id="correct-words">0</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">Ошибки</div>
                <div class="stat-value" id="wrong-guesses">0</div>
            </div>
            {% if timer_duration > 0 or enable_stopwatch %}
            <div class="stat-item">
                <div class="stat-label">
                    {% if timer_duration > 0 %}Время{% else %}Секундомер{% endif %}
                </div>
                <div class="stat-value" id="timer-display">
                    {% if timer_duration > 0 %}{{ timer_duration }}с{% else %}00:00{% endif %}
                </div>
            </div>
            {% endif %}
        </div>
    </div>

    <div class="game-content">
        <!-- Hangman Drawing -->
        <div class="hangman-container">
            <svg class="hangman-svg" viewBox="0 0 200 250">
                <!-- Gallows with improved design -->
                <!-- Base -->
                <ellipse cx="30" cy="235" rx="25" ry="8" fill="#654321" stroke="#5D4037" stroke-width="2"/>
                <!-- Main post -->
                <rect x="25" y="20" width="10" height="215" fill="#8B4513" stroke="#5D4037" stroke-width="2" rx="2"/>
                <!-- Top beam -->
                <rect x="30" y="15" width="95" height="10" fill="#8B4513" stroke="#5D4037" stroke-width="2" rx="2"/>
                <!-- Noose support -->
                <rect x="115" y="20" width="10" height="35" fill="#8B4513" stroke="#5D4037" stroke-width="2" rx="2"/>
                <!-- Support beam -->
                <line x1="35" y1="40" x2="50" y2="25" stroke="#8B4513" stroke-width="3"/>
                <!-- Rope -->
                <line x1="120" y1="50" x2="120" y2="48" stroke="#D2691E" stroke-width="3"/>
                <!-- Wood grain effect -->
                <line x1="27" y1="30" x2="27" y2="220" stroke="#A0522D" stroke-width="1" opacity="0.5"/>
                <line x1="33" y1="35" x2="33" y2="225" stroke="#A0522D" stroke-width="1" opacity="0.5"/>
                <line x1="32" y1="17" x2="120" y2="17" stroke="#A0522D" stroke-width="1" opacity="0.5"/>
                <line x1="32" y1="23" x2="120" y2="23" stroke="#A0522D" stroke-width="1" opacity="0.5"/>
                
                <!-- Body parts (initially hidden) -->
                <g id="hangman-body" class="hangman-body">
                    <!-- Head with improved face -->
                    <g id="head" class="hangman-part">
                        <circle cx="120" cy="60" r="12" stroke="#2C3E50" stroke-width="3" fill="#F4D1AE"/>
                        <!-- Eyes -->
                        <circle cx="115" cy="57" r="1.5" fill="#2C3E50"/>
                        <circle cx="125" cy="57" r="1.5" fill="#2C3E50"/>
                        <!-- Eyebrows -->
                        <path d="M 112 53 Q 115 50 118 53" stroke="#2C3E50" stroke-width="1" fill="none" id="leftBrow"/>
                        <path d="M 122 53 Q 125 50 128 53" stroke="#2C3E50" stroke-width="1" fill="none" id="rightBrow"/>
                        <!-- Smiling mouth -->
                        <path d="M 115 63 Q 120 66 125 63" stroke="#2C3E50" stroke-width="1" fill="none" id="mouth"/>
                        <!-- Hair -->
                        <path d="M 108 52 Q 120 48 132 52" stroke="#8B4513" stroke-width="2" fill="none"/>
                    </g>
                    
                    <!-- Improved body proportions -->
                    <g id="body" class="hangman-part">
                        <ellipse cx="120" cy="110" rx="15" ry="40" stroke="#2C3E50" stroke-width="3" fill="#3498DB"/>
                        <!-- Shirt details -->
                        <line x1="105" y1="85" x2="135" y2="85" stroke="#2980B9" stroke-width="2"/>
                        <circle cx="115" cy="95" r="2" fill="#2980B9"/>
                        <circle cx="125" cy="95" r="2" fill="#2980B9"/>
                        <circle cx="120" cy="105" r="2" fill="#2980B9"/>
                    </g>
                    
                    <!-- Left Arm with physics -->
                    <g id="leftArm" class="hangman-part">
                        <line x1="105" y1="90" x2="85" y2="115" stroke="#F4D1AE" stroke-width="4" id="leftArmLine"/>
                        <line x1="105" y1="90" x2="90" y2="105" stroke="#3498DB" stroke-width="3"/>
                        <!-- Hand -->
                        <circle cx="85" cy="115" r="4" fill="#F4D1AE" stroke="#2C3E50" stroke-width="1" id="leftHand"/>
                    </g>
                    
                    <!-- Right Arm with physics -->
                    <g id="rightArm" class="hangman-part">
                        <line x1="135" y1="90" x2="155" y2="115" stroke="#F4D1AE" stroke-width="4" id="rightArmLine"/>
                        <line x1="135" y1="90" x2="150" y2="105" stroke="#3498DB" stroke-width="3"/>
                        <!-- Hand -->
                        <circle cx="155" cy="115" r="4" fill="#F4D1AE" stroke="#2C3E50" stroke-width="1" id="rightHand"/>
                    </g>
                    
                    <!-- Left Leg with physics -->
                    <g id="leftLeg" class="hangman-part">
                        <line x1="110" y1="150" x2="95" y2="185" stroke="#2C3E50" stroke-width="4" id="leftLegLine"/>
                        <!-- Shoe -->
                        <ellipse cx="95" cy="185" rx="8" ry="4" fill="#34495E" id="leftShoe"/>
                    </g>
                    
                    <!-- Right Leg with physics -->
                    <g id="rightLeg" class="hangman-part">
                        <line x1="130" y1="150" x2="145" y2="185" stroke="#2C3E50" stroke-width="4" id="rightLegLine"/>
                        <!-- Shoe -->
                        <ellipse cx="145" cy="185" rx="8" ry="4" fill="#34495E" id="rightShoe"/>
                    </g>
                </g>
            </svg>
        </div>

        <!-- Word Display -->
        <div class="word-container">
            <div class="word-display" id="word-display">
                <!-- Letters will be populated by JavaScript -->
            </div>
            <div class="word-hint" id="word-hint">
                <!-- Translation will be shown here -->
            </div>
        </div>

        <!-- Alphabet -->
        <div class="alphabet-container">
            <div class="alphabet-grid" id="alphabet-grid">
                <!-- Letters A-Z will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Game Feedback -->
    <div id="game-feedback" class="game-feedback"></div>
    
    <!-- Game Over Overlay -->
    <div id="game-over-overlay" class="game-over-overlay"></div>

    <!-- Game Controls -->
    <div class="game-controls">
        <button id="hintBtn" class="btn btn-info">
            <i class="fas fa-lightbulb"></i> Подсказка
        </button>
        <button id="skipWordBtn" class="btn btn-warning">
            <i class="fas fa-forward"></i> Пропустить слово
        </button>
        <button id="resetGameBtn" class="btn btn-danger">
            <i class="fas fa-redo"></i> Начать заново
        </button>
    </div>

    <!-- Game Result Modal -->
    <div class="game-result" id="gameResult">
        <div class="result-content">
            <h2 id="result-title">Игра завершена!</h2>
            <div class="result-stats">
                <div class="result-stat">
                    <span class="result-value" id="final-correct">0</span>
                    <span class="result-label">Угадано слов</span>
                </div>
                <div class="result-stat">
                    <span class="result-value" id="final-accuracy">0%</span>
                    <span class="result-label">Точность</span>
                </div>
                {% if timer_duration > 0 or enable_stopwatch %}
                <div class="result-stat">
                    <span class="result-value" id="final-time">0</span>
                    <span class="result-label">
                        {% if timer_duration > 0 %}Время (сек){% else %}Время игры{% endif %}
                    </span>
                </div>
                {% endif %}
            </div>
            <div class="result-actions">
                <button id="playAgainBtn" class="btn btn-success">
                    <i class="fas fa-play"></i> Играть снова
                </button>
                <button id="backToSettingsBtn" class="btn btn-primary">
                    <i class="fas fa-cog"></i> Изменить настройки
                </button>
                <a href="{{ url_for('hangman_select_module') }}" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Выбрать другой модуль
                </a>
            </div>
        </div>
    </div>

    <div class="mt-4 text-center">
        <a href="{{ url_for('hangman_select_module') }}" class="btn btn-outline-secondary back-button">
            <i class="fas fa-arrow-left"></i> Выбрать другой модуль
        </a>
    </div>
</div>

<!-- Game Data -->
<script id="hangmanWords" type="application/json">
    {{ words | tojson | safe }}
</script>
<script id="gameSettings" type="application/json">
    {
        "timerDuration": {{ timer_duration }},
        "enableStopwatch": {{ enable_stopwatch|tojson }},
        "difficulty": "{{ difficulty }}",
        "gameMode": "{{ game_mode }}",
        "totalWords": {{ num_words }}
    }
</script>

<style>
/* ... (предыдущие стили остаются без изменений) ... */

/* Улучшенная видимость секундомера */
.stat-value {
    color: #fff !important;
    text-shadow: 0 0 5px rgba(0,0,0,0.8), 0 0 10px rgba(0,0,0,0.5) !important;
    font-weight: 800 !important;
    background: rgba(255, 255, 255, 0.15) !important;
    padding: 8px 12px !important;
    border-radius: 8px !important;
    border: 1px solid rgba(255, 255, 255, 0.3) !important;
    min-height: 40px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

.stat-value.danger {
    color: #ffdddd !important;
    background: rgba(255, 68, 68, 0.3) !important;
    border-color: rgba(255, 68, 68, 0.5) !important;
    text-shadow: 0 0 5px rgba(255,0,0,0.8), 0 0 10px rgba(255,0,0,0.5) !important;
}

.stat-value.warning {
    color: #ffffaa !important;
    background: rgba(255, 170, 0, 0.3) !important;
    border-color: rgba(255, 170, 0, 0.5) !important;
    text-shadow: 0 0 5px rgba(255,255,0,0.8), 0 0 10px rgba(255,255,0,0.5) !important;
}

/* Улучшенная анимация для букв */
.letter-slot.revealed {
    color: #fff;
    border-color: #4CAF50;
    background: linear-gradient(45deg, #4CAF50, #81C784, #4CAF50, #66BB6A);
    background-size: 300% 300%;
    animation: 
        letterFlip 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55),
        gradientShift 2s ease-in-out infinite,
        colorPulse 3s infinite alternate;
    box-shadow: 0 0 20px rgba(76, 175, 80, 0.6), inset 0 0 20px rgba(255, 255, 255, 0.2);
    font-weight: bold;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
}

@keyframes letterFlip {
    0% { 
        transform: rotateX(90deg) scale(0.3);
        opacity: 0;
        background: linear-gradient(45deg, #4CAF50, #81C784);
    }
    50% { 
        transform: rotateX(0deg) scale(1.1);
        opacity: 1;
        background: linear-gradient(45deg, #4CAF50, #81C784);
    }
    100% { 
        transform: rotateX(0deg) scale(1);
        background: linear-gradient(45deg, #4CAF50, #81C784, #4CAF50, #66BB6A);
    }
}

@keyframes colorPulse {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Улучшенная анимация при проигрыше */
@keyframes physicsSwing {
    0% { transform: rotate(0deg); }
    10% { transform: rotate(8deg); }
    20% { transform: rotate(-6deg); }
    30% { transform: rotate(5deg); }
    40% { transform: rotate(-4deg); }
    50% { transform: rotate(3deg); }
    60% { transform: rotate(-2deg); }
    70% { transform: rotate(1deg); }
    80% { transform: rotate(0deg); }
    100% { transform: rotate(0deg); }
}

@keyframes limbTwitch {
    0%, 100% { transform: rotate(0deg); }
    20% { transform: rotate(10deg); }
    40% { transform: rotate(-8deg); }
    60% { transform: rotate(5deg); }
    80% { transform: rotate(-3deg); }
}

.hangman-body.hanging {
    animation: physicsSwing 3s ease-in-out infinite;
}

.hangman-body.hanging #leftArm,
.hangman-body.hanging #rightArm {
    animation: limbTwitch 1.5s ease-in-out infinite;
}

.hangman-body.hanging #leftLeg,
.hangman-body.hanging #rightLeg {
    animation: limbTwitch 1.8s ease-in-out infinite;
}

/* Грустное лицо при проигрыше */
.hangman-body.hanging #leftBrow,
.hangman-body.hanging #rightBrow {
    animation: sadBrows 0.8s ease-in-out forwards;
}

.hangman-body.hanging #mouth {
    animation: sadMouth 0.8s ease-in-out forwards;
}

@keyframes sadBrows {
    0% { d: path("M 112 53 Q 115 50 118 53"); }
    100% { d: path("M 112 55 Q 115 52 118 55"); }
}

@keyframes sadMouth {
    0% { d: path("M 115 63 Q 120 66 125 63"); }
    100% { d: path("M 115 65 Q 120 62 125 65"); }
}

/* Анимация затухания при завершении */
@keyframes hangmanFadeOut {
    0% { 
        opacity: 1;
        filter: brightness(1);
    }
    70% { 
        opacity: 0.8;
        filter: brightness(0.7);
    }
    100% { 
        opacity: 0.6;
        filter: brightness(0.5) sepia(1) hue-rotate(0deg);
    }
}

.hangman-container.game-over {
    animation: hangmanFadeOut 2s ease-in-out forwards;
}

/* Другие стили остаются без изменений */
</style>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // ... (предыдущий JavaScript код без изменений) ...

    function guessLetter(letter) {
        console.log('guessLetter called:', letter, 'gameActive:', gameActive, 'already guessed:', guessedLetters.includes(letter));
        
        if (!gameActive || guessedLetters.includes(letter)) return;
        
        const btn = document.querySelector(`[data-letter="${letter}"]`);
        if (!btn || btn.disabled) {
            console.log('Button not found or disabled:', letter, btn);
            return;
        }
        
        guessedLetters.push(letter);
        
        if (currentWord.includes(letter)) {
            // Correct guess
            btn.classList.add('correct');
            btn.disabled = true;
            
            // Reveal letters with animation delay
            const slots = document.querySelectorAll(`[data-letter="${letter}"]`);
            slots.forEach((slot, index) => {
                if (slot.classList.contains('letter-slot')) {
                    setTimeout(() => {
                        slot.textContent = letter;
                        slot.classList.add('revealed');
                    }, index * 150); // Delay each letter slightly for better effect
                    correctGuesses++;
                }
            });
            
            // Check if word is complete
            const uniqueLetters = [...new Set(currentWord.replace(/\s/g, ''))];
            const guessedUniqueLetters = uniqueLetters.filter(l => guessedLetters.includes(l));
            
            if (guessedUniqueLetters.length === uniqueLetters.length) {
                wordCompleted(true);
            }
        } else {
            // Wrong guess
            btn.classList.add('incorrect');
            btn.disabled = true;
            wrongGuesses++;
            totalWrongGuesses++; // Увеличиваем общий счетчик ошибок
            
            // Show hangman part with animation
            if (wrongGuesses <= hangmanParts.length && hangmanParts[wrongGuesses - 1]) {
                setTimeout(() => {
                    hangmanParts[wrongGuesses - 1].classList.add('show');
                    
                    // Add shake effect to the whole hangman container
                    const hangmanContainer = document.querySelector('.hangman-container');
                    hangmanContainer.style.animation = 'shake 0.5s ease-in-out';
                    setTimeout(() => {
                        hangmanContainer.style.animation = '';
                    }, 500);
                }, 200);
            }
            
            // Check if game over
            if (wrongGuesses >= hangmanParts.length) {
                wordCompleted(false);
            }
        }
        
        updateStats();
    }
    
    function wordCompleted(success) {
        totalAttempts++;
        gameActive = false; // Деактивируем игру во время обработки
        
        if (success) {
            totalCorrectWords++;
            showFeedback('Отлично! Слово угадано!', 'success');
            
            // Add bonus points for fewer wrong guesses
            if (wrongGuesses === 0) {
                showFeedback('Идеально! Ни одной ошибки!', 'success');
            }
            
            // Move to next word after delay
            setTimeout(() => {
                currentWordIndex++;
                startNewWord();
            }, 2000);
        } else {
            // Reveal the word
            document.querySelectorAll('.letter-slot').forEach(slot => {
                if (slot.dataset.letter && slot.dataset.letter !== ' ') {
                    slot.textContent = slot.dataset.letter;
                    slot.classList.add('revealed');
                }
            });
            
            // Start hanging animation
            startHangingAnimation();
            
            // Move to next word after hanging animation
            setTimeout(() => {
                currentWordIndex++;
                startNewWord();
            }, 5000); // 5 seconds for hanging animation
        }
    }

    function startHangingAnimation() {
        const hangmanBody = document.getElementById('hangman-body');
        const hangmanContainer = document.querySelector('.hangman-container');
        const gameOverOverlay = document.getElementById('game-over-overlay');
        
        if (hangmanBody && hangmanContainer) {
            // Add hanging animation to the body
            hangmanBody.classList.add('hanging');
            
            // Show overlay after 1 second
            setTimeout(() => {
                if (gameOverOverlay) {
                    gameOverOverlay.classList.add('show');
                }
                hangmanContainer.classList.add('game-over');
            }, 1000);
            
            // Show dramatic text
            setTimeout(() => {
                const dramaticText = document.createElement('div');
                dramaticText.className = 'dramatic-text';
                dramaticText.innerHTML = '💀 ИГРА ОКОНЧЕНА! 💀';
                document.body.appendChild(dramaticText);
                
                // Remove dramatic text after 2 seconds
                setTimeout(() => {
                    dramaticText.remove();
                }, 2000);
            }, 2000);
            
            // Show regular feedback
            setTimeout(() => {
                showFeedback(`Слово было: ${currentWord}`, 'error');
            }, 3500);
            
            // Remove animations after 5 seconds
            setTimeout(() => {
                hangmanBody.classList.remove('hanging');
                hangmanContainer.classList.remove('game-over');
                if (gameOverOverlay) {
                    gameOverOverlay.classList.remove('show');
                }
                // gameActive будет установлен в true в startNewWord()
            }, 5000);
        }
    }

    // ... (остальной JavaScript код без изменений) ...
});
</script>
{% endblock %}