# Углубленное описание проекта "Duckly"

## 1. Обзор проекта

Проект "Duckly" представляет собой веб-платформу для обучения, созданную с использованием Python и Flask. Платформа ориентирована на изучение языков и предоставляет мощные инструменты для учителей по созданию разнообразных тестов, а ученикам — интерактивные способы их прохождения и тренировки словарного запаса. Архитектура приложения включает в себя бэкенд на Flask, обслуживающий как традиционные веб-страницы через шаблонизатор Jinja2, так и RESTful API для динамического взаимодействия с фронтендом. Проект подготовлен для развертывания с использованием Docker.

## 2. Детальный разбор функционала

### 2.1. Управление пользователями и ролями

Система управления пользователями реализована в `blueprints/auth.py` и использует модель `User` из `models.py`.

*   **Роли:**
    *   **Учитель (`teacher` == 'yes'):** Имеет полный доступ к созданию и управлению контентом (словами, модулями) и тестами. Учителя могут просматривать результаты всех учеников, которые проходили их тесты.
    *   **Ученик (`teacher` != 'yes'):** Может просматривать учебные материалы, проходить тесты по ссылкам, предоставленным учителем, играть в игры и отслеживать собственный прогресс и результаты.
*   **Аутентификация:** Используются сессии на стороне сервера (`flask_session`) для управления состоянием входа. Пароли хэшируются с помощью `werkzeug.security`.

### 2.2. Управление учебным контентом

Реализовано в `blueprints/words.py` и основном файле `site_1.py`.

*   **Иерархическая структура:** Контент организован по четкой иерархии: **Класс -> Юнит -> Модуль**.
    *   **Слова (`Word`):** Каждое слово привязано к модулю и содержит само слово и его перевод.
    *   **Предложения (`Sentence`):** Аналогично словам, предложения привязаны к модулям, что позволяет создавать тесты на основе контекста.
*   **Интерфейс:** Учителя управляют контентом через веб-формы, которые динамически подгружают юниты и модули в зависимости от выбранного класса, используя для этого API-эндпоинты (например, `/get_units_for_class`).

### 2.3. Система тестов

Это ядро платформы, реализованное в `site_1.py` с множеством маршрутов, таких как `/create_test`, `/test/<id>` и `/take_test/<link>`.

*   **Типы тестов (модель `Test`, поле `type`):**
    *   **Диктант (`dictation`):** Ученик слушает (подразумевается) и вводит слово.
    *   **Вставить букву (`add_letter`):** В слове пропущены буквы, которые нужно вставить.
    *   **Верно/неверно (`true_false`):** Ученику предлагается пара "слово-перевод", и он должен определить, верна ли она.
    *   **Множественный выбор (`multiple_choice`, `multiple_choice_multiple`):** Выбор одного или нескольких правильных переводов из списка.
    *   **Вписать слово (`fill_word`):** В предложении пропущено слово, которое нужно вписать.
*   **Создание и настройка:** Учитель проходит многошаговый процесс: выбирает тип теста, название, класс, слова (из модулей или добавляет свои), устанавливает **ограничение по времени**, **порядок слов** (случайный или последовательный) и **количество слов**.
*   **Прохождение теста:**
    *   Ученик переходит по уникальной сгенерированной ссылке.
    *   **Сохранение прогресса:** Ответы ученика сохраняются по ходу теста через API (`/api/test/.../save_progress`), что позволяет возобновить тест в случае обрыва соединения. Для этого используются модели `TestProgress` и `TestResult`.
    *   **Защита от списывания:** Скрипт `static/js/anti_cheat.js` отслеживает события потери фокуса на странице (переключение вкладок), что может свидетельствовать о попытке найти ответ в другом месте.
*   **Просмотр результатов:** После завершения теста ученик и учитель могут просмотреть детальные результаты, включая правильные/неправильные ответы, затраченное время.

### 2.4. Игровые режимы

Расположены в `site_1.py` (маршруты `/games/...`) и используют соответствующие JS-файлы из `static/js/`.

*   **Флеш-карты (`game_flashcards`):** Классические карточки для заучивания. Интегрированы с системой **интервального повторения** (модель `UserWordReview`, алгоритм SM-2), которая рассчитывает, когда ученику нужно снова показать слово для лучшего запоминания.
*   **Виселица (`game_hangman`):** Угадывание слова по буквам.
*   **Сопоставление слов (`game_word_match`):** Соотнесение слов с их переводами на время.
*   **Собери предложение (`game_sentence_scramble`):** Восстановление правильного порядка слов в предложении.

## 3. Технический стек

*   **Бэкенд:** Python, Flask, Flask-SQLAlchemy, Flask-Session
*   **База данных:** SQLite
*   **Фронтенд:** HTML, CSS, JavaScript, jQuery, Bootstrap
*   **Развертывание:** Docker

## 4. Детальные предложения по улучшению

### 4.1. Функциональность

*   **Панели управления:**
    *   **Для учителя:** Виджеты "Активные тесты", "Последние результаты учеников", "Статистика по классу (средний балл, % прохождения)".
    *   **Для ученика:** Список назначенных тестов с дедлайнами, календарь повторения слов (на основе SM-2), личная статистика.
*   **Геймификация:**
    *   **Очки опыта (XP):** За прохождение тестов, игры, ежедневный вход.
    *   **Значки (достижения):** "Магистр диктантов" (5 диктантов без ошибок), "Спринтер" (пройти тест на время быстрее среднего), "Полиглот" (выучить 100 слов).
*   **Синтез речи (Text-to-Speech):** Интеграция с браузерным API `window.speechSynthesis` или внешним сервисом для озвучивания слов в диктантах и флеш-картах.

### 4.2. Стили и UX

*   **Переход на современный UI-фреймворк (React/Vue):**
    *   **Пример:** Страница прохождения теста (`take_test.html`) может быть реализована как единый компонент, который управляет своим состоянием (текущий вопрос, ответы, таймер) без перезагрузки страницы. Это сделает интерфейс значительно быстрее и отзывчивее.
    *   **Выгода:** Компонентный подход позволит переиспользовать элементы интерфейса (например, карточку вопроса) в разных типах тестов.
*   **Улучшение UX:**
    *   **Процесс создания теста:** Вместо нескольких страниц можно использовать мастер с шагами на одной странице, где учитель видит все настройки своего будущего теста.
    *   **Обратная связь:** После ответа в тесте можно мгновенно подсвечивать правильный ответ и давать пояснения, а не ждать окончания всего теста.

### 4.3. Техническое качество

*   **Рефакторинг `site_1.py`:**
    *   **Пример:** Маршрут `/create_test` занимает более 300 строк. Логику для каждого типа теста (`dictation`, `add_letter` и т.д.) можно вынести в отдельные приватные функции `_create_dictation_test(form_data)`, `_create_add_letter_test(form_data)`. Всю группу маршрутов, связанных с тестами, следует перенести в `blueprints/tests.py`.
*   **Разделение фронтенда и бэкенда (Headless/API-first):**
    *   **План:** Flask-приложение становится чисто API-сервером (возвращает только JSON). Фронтенд (например, на React) разрабатывается как отдельное приложение, которое "общается" с бэкендом по API.
    *   **Выгода:** Позволит независимо развивать и развертывать фронтенд и бэкенд. На основе этого же API в будущем можно будет создать мобильное приложение.
*   **Управление конфигурацией:**
    *   **Проблема:** `app.secret_key` и URI базы данных сейчас частично жестко закодированы.
    *   **Решение:** Использовать библиотеку вроде `python-dotenv` для загрузки всех конфигурационных переменных (`SECRET_KEY`, `DATABASE_URI`, `SESSION_TYPE`) из файла `.env`, который не будет храниться в системе контроля версий.
*   **Безопасность:**
    *   **Авторизация:** Сейчас проверка прав учителя (`user.teacher == 'yes'`) разбросана по разным маршрутам. Можно создать кастомный декоратор `@teacher_required`, который будет оборачивать функции представлений и выполнять эту проверку централизованно.

### 4.4. Назначение тестов

*   **Позволить учителям назначать тесты конкретным ученикам или классам с указанием сроков выполнения.**

### 4.5. Больше игровых режимов

*   **Добавить больше интерактивных игр для практики словарного запаса.**

### 4.6. Геймификация

*   **Внедрить систему очков, значков и досок почета для мотивации учеников.**

### 4.7. Синтез речи

*   **Интегрировать движок для синтеза речи для произношения слов и предложений.**

### 4.8. Редактор с форматированием

*   **Использовать редактор с расширенными возможностями форматирования для создания тестов и контента.**

### 4.9. Интернационализация (i18n)

*   **Поддержка нескольких языков для пользовательского интерфейса.**

### 4.10. Переход на современный UI-фреймворк

*   **Текущий интерфейс, вероятно, основан на стандартном Bootstrap. Переход на современный фреймворк, такой как React, Vue.js или Svelte, может создать более динамичный и отзывчивый пользовательский интерфейс. Это потребует значительных усилий.**

### 4.11. Улучшенный визуальный дизайн

*   **Общий визуальный дизайн можно улучшить с помощью более современной цветовой палитры, типографики и макета.**

### 4.12. Улучшенная адаптивность

*   **Обеспечить корректную работу приложения на всех устройствах, включая настольные компьютеры, планшеты и мобильные телефоны.**

### 4.13. Улучшения UX

*   **Упростить процесс создания тестов с помощью более интуитивно понятного интерфейса.**
*   **Предоставлять пользователям более качественную обратную связь во время тестов и игр.**
*   **Улучшить навигацию и информационную архитектуру.** 